{"version":3,"sources":["logo.svg","components/StatTooltip.js","components/Stat.js","components/Basics.js","components/DivisionName.js","components/Doctrine.js","components/Technology.js","components/Unit.js","components/Units.js","components/Warnings.js","components/Choices.js","components/Combat.js","components/Upgrade.js","components/Upgrades.js","components/Equipment.js","components/EquipmentList.js","components/SupportEntry.js","components/Support.js","components/TerrainCell.js","components/TerrainRow.js","components/Terrain.js","components/ModSelector.js","components/SaveAndLoadDivision.js","components/Division.js","database/recursivelyMerge.js","database/Unit.js","database/Division.js","database/Equipment.js","database/Country.js","database/Database.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","StatTooltip","data","this","props","base","header","unitData","secondaryHeader","secondaryData","techHeader","techData","react_default","a","createElement","className","key","map","_ref","index","unit","count","value","name","_ref2","_ref3","Component","Stat","_this$props","tooltipData","StatTooltip_StatTooltip","Basics","hasData","Object","slicedToArray","Stat_Stat","assign","Choices","divisionName","placeholderName","changeName","type","placeholder","onChange","e","target","Doctrine","handleChange","event","_this","changeDoctrine","db","doctrine","react","availableDoctrines","val","Technology","changeYear","year","availableYears","Unit","normalizeCount","_unit","normalizedCount","parseInt","handleChangeCount","_this$props2","handleChangeType","_this$props3","_this$props4","country","_unit2","allFrontline","values","unitTypes","filter","combat_width","availableFrontline","availableUnits","min","onBlur","disabled","indexOf","Units","changeUnits","units","newUnits","toConsumableArray","length","pop","push","_this2","Unit_Unit","Warnings","warnings","warning","DivisionName_Choices","Technology_Technology","Doctrine_Doctrine","Units_Units","Warnings_Warnings","Combat","Upgrade","upgrade","newValue","max_level","level","replace","max","Upgrades","upgradeKey","equipment","upgrades","availableUpgradeKeys","equipmentType","availableUpgrades","n","Upgrade_Upgrade","EquipmentList","cost","onUpgradeChange","Upgrades_Upgrades","Equipment_EquipmentList","SupportEntry","checked","onSupportChange","available","selected","shortName","Support","row","SupportEntry_SupportEntry","TerrainCell","_this$props$data","valuePretty","sprintf","TerrainRow","mov","atk","def","charAt","toUpperCase","substr","capitalize","TerrainCell_TerrainCell","Terrain","TerrainRow_TerrainRow","ModSelector","changeMod","onClick","SaveAndLoadDivision","state","counter","selection","loadClicked","savedDivisions","onLoad","saveClicked","saved","saveData","window","localStorage","setItem","JSON","stringify","setState","getItem","parse","changeSelection","loadSelection","loadButton","division","concat","Division","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","modName","dbs","default_year","default_units","support","default_support","changeUpgrade","equipmentKey","newLevel","oldState","objectSpread","defineProperty","handleLoad","savedData","handleSupportChange","company","vanilla","_this$state","Choices_Choices","Support_Support","Basics_Basics","basics","EquipmentList_EquipmentList","equipmentUsed","Combat_Combat","combat","Terrain_Terrain","terrain","ModSelector_ModSelector","SaveAndLoadDivision_SaveAndLoadDivision","_this$state2","_this$state3","unitsTypes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","unitName","err","return","supportName","supportUnitTypes","recursivelyMerge","extra","Error","unitType","missingEquipment","Set","Map","equipmentMap","set","fallbackEquipment","fallbackEquipmentMap","add","country_bonuses","unitBonusesfor","stat","keys","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","group","calculateFromUnitTypeAndBonus","hp","supply_use","calculateFromEquipmentAndBonusMult","factor","own_equipment_fuel_consumption_mult","fuel_consumption","manpower","training_time","weight","special_forces","can_be_parachuted","org","recovery_rate","result","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","build_cost_ic","equipmentSpeeds","maximum_speed","s","Math","apply","terrain_bonuses","sum","avg","round3","x","round","round6","cleanupReport","report","v","_ref4","k","t","formatSpeed","speed","tooltipForSpeed","tooltipForSum","tooltipForOrganization","tooltipForRecoveryRate","suppression","tooltipForSuppression","tooltipForSupplyUse","fuel_use","tooltipForFuelUse","fuel_capacity","recon","entrenchment","tooltipForEntrenchment","reliability_factor","casualty_trickleback","experience_loss_factor","tooltipForCanBeParachuted","tooltipForSpecialForces","tooltipForTrainingTime","ic_cost","_ref7","_ref6","soft_attack","hard_attack","defense","breakthrough","armor","tooltipForArmor","piercing","tooltipForPiercing","hardness","tooltipForHardness","initiative","equipment_capture_factor","bonuses","sort","bonus","movement","attack","defence","groupUnitStats","frontlineValues","_ref8","is_frontline","supportValues","_ref9","baseValue","_ref10","reduce","b","bonusValue","_ref11","frontline_units","every","_ref12","format","_ref13","_ref14","_ref15","forEach","eq","frontline_count","support_count","support_units","infantry","u","mobile","armored","brigades","ceil","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","field","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","has","get","_ref16","_ref17","_ref18","divisionBonuses","techBonusesFor","_ref19","_ref20","_ref21","_ref22","_ref23","_ref24","_ref25","_ref26","_ref27","_ref28","technologies","tech","_ref29","groupFrontlineUnitStats","_ref30","_ref31","_ref32","_ref33","_ref34","_ref35","_ref36","suppression_factor","supply_consumption_factor","fuel_consumption_factor","air_attack","unit_hardness","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_ref39","_ref38","otherCount","terrains","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_arr","_i","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","terrainBonusfor","upgradableStats","Equipment","variantBonus","calculateVariantBonus","available_upgrades","upgradeValue","Country","calculateEquipmentMap","calculateDivisionBonuses","enabledEquipmentTypes","equipmentTypes","archetype","enabledSubunits","enabledEquipmentArchetypes","active","i","categories","technology","category","unit_bonuses","max_dig_in","army_speed_factor","enable_subunits","enable_equipments","mods","kaiserreich","millennium_dawn","Database","mod","doctrines","calculateFallbackEquipmentMap","years","start_year","techs","technologiesForYear","technologiesForDoctrine","App","src","logo","alt","Division_Division","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.dc0b68c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nexport default class StatTooltip extends Component {\n  render() {\n    let { data } = this.props;\n    if (!data) {\n      return null;\n    }\n    let { base, header, unitData, secondaryHeader, secondaryData, techHeader, techData } = data;\n    return <div className=\"stat-tooltip\">\n      <div>{ header }</div>\n      <table>\n        <tbody>\n          { (base != null) ?\n            <tr key=\"base\">\n              <td className=\"substat-count\"></td>\n              <td className=\"substat-name\">Base</td>\n              <td className=\"substat-value\">{base}</td>\n            </tr>\n            : null\n          }\n          { unitData.map(({unit, count, value}, index) => (\n            <tr key={index}>\n              <td className=\"substat-count\">{count}x</td>\n              <td className=\"substat-name\">{unit.name}</td>\n              <td className=\"substat-value\">{value}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      { secondaryHeader && <div>{ secondaryHeader }</div> }\n      { secondaryData && <table>\n        <tbody>\n          { secondaryData.map(({unit, count, value}, index) => (\n            <tr key={index}>\n              <td className=\"substat-count\">{count}x</td>\n              <td className=\"substat-name\">{unit.name}</td>\n              <td className=\"substat-value\">{value}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      }\n      { techHeader && <div>{ techHeader }</div> }\n      { techData && <table>\n        <tbody>\n          { techData.map(({name, value}, index) => (\n            <tr key={index}>\n              <td className=\"substat-count\"></td>\n              <td className=\"substat-name\">{name}</td>\n              <td className=\"substat-value\">{value}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      }\n\n    </div>\n  }\n}\n","import React, { Component } from \"react\";\nimport StatTooltip from \"./StatTooltip\";\n\nexport default class Stat extends Component {\n  render() {\n    let { name, value, tooltipData } = this.props;\n    return <li className=\"stat\">\n      <span className=\"stat-name\">{name}</span>\n      <span className=\"stat-value\">{value}</span>\n      <StatTooltip data={tooltipData} />\n    </li>\n  }\n}\n","import React, { Component } from \"react\";\nimport Stat from \"./Stat\";\n\nexport default class Basics extends Component {\n  render() {\n    let { data, hasData } = this.props;\n    if (!hasData) {\n      return <div className=\"basics\">\n        <h4>Basics</h4>\n        <div>Division has no units</div>\n      </div>\n    }\n    return <div className=\"basics\">\n      <h4>Basics</h4>\n      <ul>\n        {\n          data.map(([name, value, tooltipData]) => <Stat key={name} {...{name, value, tooltipData}} />)\n        }\n      </ul>\n    </div>\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Choices extends Component {\n  render() {\n    let { divisionName, placeholderName, changeName } = this.props;\n    return <div>\n      <h4>Name</h4>\n      <input type=\"text\" value={divisionName} placeholder={placeholderName} onChange={(e) => changeName(e.target.value)}/>\n    </div>\n  }\n}\n","import React, { Component, Fragment } from \"react\";\n\nexport default class Doctrine extends Component {\n  handleChange = (event) => {\n    let value = event.target.value;\n    this.props.changeDoctrine(value);\n  }\n  render() {\n    let {db, doctrine} = this.props;\n    return <Fragment>\n      <h4>Doctrine</h4>\n      <select value={doctrine || \"\"} onChange={this.handleChange}>\n        <option value=\"\" key=\"\">-</option>\n        {\n          db.availableDoctrines().map(val => <option key={val} value={val}>{val}</option>)\n        }\n      </select>\n    </Fragment>\n  }\n}\n\n","import React, { Component, Fragment } from \"react\";\n\nexport default class Technology extends Component {\n  handleChange = (event) => {\n    let value = event.target.value;\n    this.props.changeYear(value);\n  }\n  render() {\n    let {db, year} = this.props;\n    return <Fragment>\n      <h4>Technology</h4>\n      <select value={year || \"\"} onChange={this.handleChange}>\n        <option value=\"\" key=\"\">-</option>\n        {\n          db.availableYears().map(val => <option key={val} value={val}>{val}</option>)\n        }\n      </select>\n    </Fragment>\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Unit extends Component {\n  normalizeCount = (event) => {\n    let {index, unit, onChange} = this.props;\n    let [count, type] = unit;\n    let normalizedCount = parseInt(count, 10);\n    if (count !== normalizedCount) {\n      onChange(index, [normalizedCount, type]);\n    }\n  }\n\n  handleChangeCount = (event) => {\n    let count = event.target.value;\n    // A hack to convert once done, but still allow temporary bad values like \"\"\n    if (count === \"\"+parseInt(count, 10)) {\n      count = parseInt(count, 10);\n    }\n    let {index, unit, onChange} = this.props;\n    let type = unit[1];\n    onChange(index, [count, type]);\n  }\n  handleChangeType = (event) => {\n    let type = event.target.value;\n    let {index, unit, onChange} = this.props;\n    let count = unit[0];\n    onChange(index, [count, type]);\n  }\n  render() {\n    let {country, unit} = this.props;\n    let [count, type] = unit;\n\n    let allFrontline = Object.values(country.db.unitTypes).filter(unit => unit.combat_width > 0);\n    let availableFrontline = country.availableUnits().filter(unit => unit.combat_width > 0).map(unit => unit.key);\n\n    return <div className=\"unit-select\">\n      <input type=\"number\" min=\"0\" value={\"\"+count} onChange={this.handleChangeCount} onBlur={this.normalizeCount} />\n      <select value={type} onChange={this.handleChangeType}>\n        {\n          allFrontline.map(unit => <option disabled={availableFrontline.indexOf(unit.key) === -1} key={unit.key} value={unit.key}>{unit.name}</option> )\n        }\n      </select>\n    </div>\n  }\n}\n","import React, { Component, Fragment } from \"react\";\nimport Unit from \"./Unit\";\n\nexport default class Units extends Component {\n  handleChange = (index, unit) => {\n    let {changeUnits, units} = this.props;\n    let newUnits = [...units];\n    newUnits[index] = unit;\n\n    // Try to maintain just one empty slot\n    while (\n      newUnits.length >= 2 &&\n      newUnits[newUnits.length-1][0] === 0 &&\n      newUnits[newUnits.length-2][0] === 0\n    ) {\n      newUnits.pop();\n    }\n    if (newUnits[newUnits.length-1][0] !== 0) {\n      newUnits.push([0, \"infantry\"]);\n    }\n    changeUnits(newUnits);\n  }\n\n  render() {\n    let {db, country, units} = this.props;\n    return <Fragment>\n      <h4>Battalions</h4>\n      {\n        units.map((unit, index) => (\n          <Unit {...{db, unit, country}} key={index} index={index} onChange={this.handleChange} />\n        ))\n      }\n    </Fragment>\n  }\n}\n","import React, { Component, Fragment } from \"react\";\n\nexport default class Warnings extends Component {\n  render() {\n    let {warnings} = this.props;\n    if (warnings.length === 0) {\n      return null;\n    }\n\n    return <Fragment>\n      <h4>Warnings</h4>\n      {\n        warnings.map((warning, index) => (\n          <div key={index} className=\"alert alert-danger\">{warning}</div>\n        ))\n      }\n    </Fragment>\n  }\n}\n","import React, { Component } from \"react\";\nimport DivisionName from \"./DivisionName\";\nimport Doctrine from \"./Doctrine\";\nimport Technology from \"./Technology\";\nimport Units from \"./Units\";\nimport Warnings from \"./Warnings\";\n\nexport default class Choices extends Component {\n  render() {\n    let {db, country, year, doctrine, units, warnings, changeYear, changeDoctrine, changeUnits, divisionName, placeholderName, changeName} = this.props;\n    return <div className=\"choices\">\n      <DivisionName {...{divisionName, placeholderName, changeName}} />\n      <Technology {...{db, year, changeYear}} />\n      <Doctrine {...{db, doctrine, changeDoctrine}} />\n      <Units {...{db, country, units, changeUnits}} />\n      <Warnings {...{warnings}} />\n    </div>\n  }\n}\n","import React, { Component } from \"react\";\nimport Stat from \"./Stat\";\n\nexport default class Combat extends Component {\n  render() {\n    let { data, hasData } = this.props;\n    if (!hasData) {\n      return <div className=\"combat\">\n        <h4>Basics</h4>\n        <div>Division has no units</div>\n      </div>\n    }\n\n    return <div className=\"combat\">\n      <h4>Combat</h4>\n      <ul>\n        {\n          data.map(([name, value, tooltipData]) => <Stat key={name} {...{name, value, tooltipData}} />)\n        }\n      </ul>\n    </div>\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Upgrade extends Component {\n  handleChange = (event) => {\n    let {upgrade, onChange} = this.props;\n    let newValue = parseInt(event.target.value, 10);\n    if (newValue < 0) {\n      newValue = 0;\n    }\n    if (newValue > upgrade.max_level) {\n      newValue = upgrade.max_level;\n    }\n    onChange(upgrade.key, newValue);\n  }\n\n  render() {\n    let {upgrade, level} = this.props;\n    let name = upgrade.name.replace(/ Armament/, \"\");\n\n    return <div className=\"upgrade\">\n      {name}\n      <input type=\"number\" min={0} max={upgrade.max_level} value={level} onChange={this.handleChange}/>\n    </div>\n  }\n}\n","import React, { Component } from \"react\";\nimport Upgrade from \"./Upgrade\";\n\nexport default class Upgrades extends Component {\n  handleChange = (upgradeKey, newValue) => {\n    let {equipment,onChange} = this.props;\n    onChange(equipment.key, upgradeKey, newValue);\n  }\n\n  render() {\n    let {equipment,upgrades} = this.props;\n    let availableUpgradeKeys = equipment.equipmentType.upgrades || [];\n    if (!availableUpgradeKeys.length) {\n      return null;\n    }\n    let db = equipment.db;\n    let availableUpgrades = availableUpgradeKeys.map(n => db.upgrades[n]);\n\n    return <div>\n      {\n        availableUpgrades.map(upgrade => (\n          <Upgrade key={upgrade.key} upgrade={upgrade} level={upgrades[upgrade.key] || 0} onChange={this.handleChange} />\n        ))\n      }\n    </div>\n  }\n}\n","import React, { Component } from \"react\";\nimport Upgrades from \"./Upgrades\";\n\nexport default class EquipmentList extends Component {\n  render() {\n    let {equipment, count, cost, upgrades, onUpgradeChange} = this.props;\n\n    return <li key={equipment.key}>\n      <div className=\"equipment-count\">\n        <span>{equipment.name}</span>\n        <span>{count} ({cost})</span>\n      </div>\n      <Upgrades equipment={equipment} upgrades={upgrades} onChange={onUpgradeChange} />\n    </li>\n  }\n}\n\n","import React, { Component } from \"react\";\nimport Equipment from \"./Equipment\";\n\nexport default class EquipmentList extends Component {\n  render() {\n    let {data, hasData, upgrades, onUpgradeChange} = this.props;\n    if (!hasData) {\n      return <div className=\"equipment-list\">\n        <h4>Equipment</h4>\n        <div>Division has no units</div>\n      </div>\n    }\n\n    return <div className=\"equipment-list\">\n      <h4>Equipment</h4>\n      <ul>\n        {\n          data.map(([equipment, count, cost]) =>\n            <Equipment {...{equipment, count, cost, onUpgradeChange}} key={equipment.key} upgrades={upgrades[equipment.key] || {}} />\n          )\n        }\n      </ul>\n    </div>\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class SupportEntry extends Component {\n  handleChange = (event) => {\n    let value = event.target.checked;\n    let {data, onSupportChange} = this.props;\n    onSupportChange(data.key, value);\n  }\n  render() {\n    let {data} = this.props;\n    let {name, available, selected} = data;\n    let shortName = name.replace(/^Support /, \"\").replace(/ Company$/, \"\");\n    return <div className={available ? \"checkbox\" : \"checkbox disabled\"} >\n      <label className=\"control-label\">\n        <input type=\"checkbox\" checked={selected} disabled={!available} onChange={this.handleChange} />\n        {shortName}\n      </label>\n    </div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport SupportEntry from \"./SupportEntry\";\n\nexport default class Support extends Component {\n  render() {\n    let {data, onSupportChange} = this.props;\n    return <div className=\"support\">\n      <h4>Support</h4>\n      <div className=\"list\">\n        {\n          data.map((row, index) =>\n            <SupportEntry key={index} data={row} onSupportChange={onSupportChange} />\n          )\n        }\n      </div>\n    </div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport {sprintf} from \"sprintf-js\";\nimport StatTooltip from \"./StatTooltip\";\n\nexport default class TerrainCell extends Component {\n  render() {\n    let {value, tooltipData} = this.props.data;\n\n    if (!tooltipData) {\n      return <td></td>;\n    }\n\n    let className = (value >= 0) ? \"bonus stat-value\" : \"penalty stat-value\";\n    let valuePretty = sprintf(\"%+.1f%%\", value*100);\n\n    return <td className=\"terrain-cell\">\n      <span className={className}>{valuePretty}</span>\n      <StatTooltip data={tooltipData} />\n    </td>\n  }\n}\n","import React, { Component } from \"react\";\nimport TerrainCell from \"./TerrainCell\";\n\nlet capitalize = (name) => {\n  return name.charAt(0).toUpperCase() + name.substr(1);\n}\n\nexport default class TerrainRow extends Component {\n  render() {\n    let [name, mov, atk, def] = this.props.data;\n    return <tr>\n      <td>{capitalize(name)}</td>\n      <TerrainCell data={mov} />\n      <TerrainCell data={atk} />\n      <TerrainCell data={def} />\n    </tr>\n  }\n}\n","import React, { Component } from \"react\";\nimport TerrainRow from \"./TerrainRow\";\n\nexport default class Terrain extends Component {\n  render() {\n    let { data } = this.props;\n    if (data.length === 0) {\n      return <div className=\"terrain\">\n        <h4>Terrain</h4>\n        <div>Division has no terrain bonuses</div>\n      </div>\n    }\n\n    return <div className=\"terrain\">\n      <h4>Terrain</h4>\n      <table>\n        <thead>\n          <tr>\n            <th>Terrain</th>\n            <th>Movement</th>\n            <th>Attack</th>\n            <th>Defense</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            data.map((row, index) => <TerrainRow data={row} key={index}/>)\n          }\n        </tbody>\n      </table>\n    </div>\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class ModSelector extends Component {\n  render() {\n    let {changeMod} = this.props;\n    return <div className=\"mod-selector\">\n      <span>Switch mod:</span>\n      <button className=\"btn btn-primary\" onClick={() => changeMod(\"vanilla\")}>Vanilla (1.6.2)</button>\n      <button className=\"btn btn-primary\" onClick={() => changeMod(\"kaiserreich\")}>Kaiserreich (0.8.5 for 1.6.2)</button>\n      <button className=\"btn btn-primary\" onClick={() => changeMod(\"millennium_dawn\")}>Millennium Dawn (0.3.0 for 1.5.4)</button>\n    </div>\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class SaveAndLoadDivision extends Component {\n  state = {\n    counter: 1,\n    selection: 0,\n  }\n  loadClicked = () => {\n    let saved = this.savedDivisions();\n    let selected = saved[this.state.selection];\n    this.props.onLoad(selected);\n  }\n  saveClicked = () => {\n    let saved = this.savedDivisions();\n    saved.push(this.props.saveData);\n    window.localStorage.setItem(\"saved-hoi4-divisions\", JSON.stringify(saved));\n    // Force refresh\n    this.setState({counter: this.state.counter + 1, selection: 0});\n  }\n  savedDivisions = () => {\n    let saved = window.localStorage.getItem(\"saved-hoi4-divisions\");\n    if (!saved) {\n      return [];\n    } else {\n      return JSON.parse(saved);\n    }\n  }\n  changeSelection = (event) => {\n    this.setState({selection: event.target.value});\n  }\n  render() {\n    let saved = this.savedDivisions();\n    let loadSelection, loadButton;\n    if (saved.length >= 1) {\n      loadSelection = <select value={this.state.selection} onChange={this.changeSelection}>\n        {\n          saved.map((division, key) => (\n            <option key={key} value={key}>{ division.divisionName || `Division ${key+1}` }</option>\n          ))\n        }\n      </select>\n      loadButton = <button className=\"btn btn-primary\" onClick={this.loadClicked}>Load division</button>\n    }\n    return (\n      <div className=\"save-and-load-controls\">\n        <button className=\"btn btn-primary\" onClick={this.saveClicked}>Save division</button>\n        { loadSelection }\n        { loadButton }\n      </div>\n    )\n  }\n}\n","import React, { Component, Fragment } from \"react\";\nimport Basics from \"./Basics\";\nimport Choices from \"./Choices\";\nimport Combat from \"./Combat\";\nimport EquipmentList from \"./EquipmentList\";\nimport Support from \"./Support\";\nimport Terrain from \"./Terrain\";\nimport ModSelector from \"./ModSelector\";\nimport SaveAndLoadDivision from \"./SaveAndLoadDivision\";\n\nexport default class Division extends Component {\n  constructor(props) {\n    super(props);\n    let {dbs} = props;\n    this.dbs = dbs;\n    let db = this.dbs.vanilla;\n    this.state = {\n      modName: \"vanilla\",\n      year: db.default_year,\n      doctrine: null,\n      units: db.default_units,\n      support: db.default_support,\n      upgrades: {},\n      divisionName: \"\",\n    }\n  }\n  get db() {\n    return this.dbs[this.state.modName];\n  }\n  changeMod = (modName) => {\n    let db = this.dbs[modName];\n    this.setState({\n      modName: modName,\n      year: db.default_year,\n      doctrine: null,\n      units: db.default_units,\n      support: db.default_support,\n      upgrades: {},\n      divisionName: \"\",\n    })\n  }\n  changeYear = (year) => {\n    this.setState({year});\n  }\n  changeDoctrine = (doctrine) => {\n    this.setState({doctrine});\n  }\n  changeUnits = (units) => {\n    this.setState({units});\n  }\n  changeName = (divisionName) => {\n    this.setState({divisionName});\n  }\n  changeUpgrade = (equipmentKey, upgradeKey, newLevel) => {\n    this.setState(oldState => ({\n      upgrades: {\n        ...oldState.upgrades,\n        [equipmentKey]: {\n          ...(oldState.upgrades[equipmentKey] || {}),\n          [upgradeKey]: newLevel,\n        },\n      },\n    }));\n  }\n  handleLoad = (savedData) => {\n    this.setState(savedData);\n  }\n  render() {\n    let db = this.db;\n    let placeholderName = \"My Division\";\n    let {year, doctrine, units, upgrades, divisionName} = this.state;\n    let {changeYear, changeDoctrine, changeUnits, changeName} = this;\n    let country = this.country();\n    let division = this.division();\n    let warnings = division.warnings();\n    let hasData = (division.units.length !== 0);\n\n    return <Fragment>\n      <div className=\"division-box\">\n        <Choices {...{db, country, year, doctrine, units, changeYear, changeDoctrine, changeUnits, warnings, divisionName, placeholderName, changeName}} />\n        <Support data={this.support()} onSupportChange={this.handleSupportChange} />\n        <Basics data={division.basics()} hasData={hasData} />\n        <EquipmentList data={division.equipmentUsed()} hasData={hasData} upgrades={upgrades} onUpgradeChange={this.changeUpgrade} />\n        <Combat data={division.combat()}  hasData={hasData} />\n        <Terrain data={division.terrain()}/>\n      </div>\n      <ModSelector changeMod={this.changeMod} />\n      <SaveAndLoadDivision onLoad={this.handleLoad} saveData={this.state} />\n    </Fragment>\n  }\n  handleSupportChange = (company, state) => {\n    let {support} = this.state;\n    support = {...support, [company]: state};\n    this.setState({support});\n  }\n  country() {\n    let {year, doctrine, upgrades} = this.state;\n    let db = this.db;\n    return db.country(year, doctrine, upgrades);\n  }\n  division() {\n    let {units, support} = this.state;\n    let unitsTypes = {};\n    let country = this.country();\n    for (let [count, unitName] of units) {\n      if (count) {\n        unitsTypes[unitName] = (unitsTypes[unitName] || 0) + parseInt(count, 10);\n      }\n    }\n    for (let supportName in support) {\n      if (support[supportName]) {\n        unitsTypes[supportName] = 1;\n      }\n    }\n    return country.division(unitsTypes);\n  }\n\n  support() {\n    let db = this.db;\n    let { support } = this.state;\n    let unitTypes = db.unitTypes;\n    let supportUnitTypes = db.supportUnitTypes();\n    let country = this.country();\n    let available = country.availableUnits().map((unit) => unit.key);\n    return supportUnitTypes.map((key) => ({\n      key,\n      name: unitTypes[key].name,\n      available: (available.indexOf(key) !== -1),\n      selected: !!(support[key]),\n    }))\n  }\n}\n","let recursivelyMerge = (base, extra) => {\n  for (let key in extra) {\n    let val = extra[key];\n    if (key in base) {\n      if (typeof(val) === \"object\") {\n        if (typeof(base[key]) !== \"object\") {\n          throw new Error(\"Incompatible merge\")\n        }\n        recursivelyMerge(base[key], val)\n      } else if (typeof(val) === \"number\") {\n        if (typeof(base[key]) !== \"number\") {\n          throw new Error(\"Incompatible merge\")\n        }\n        base[key] = base[key] + val;\n      } else {\n        throw new Error(\"Not sure how to merge\")\n      }\n    } else {\n      if (typeof(val) === \"object\") {\n        base[key] = {};\n        recursivelyMerge(base[key], val)\n      } else if (typeof(val) === \"number\") {\n        base[key] = val;\n      } else {\n        throw new Error(\"Not sure how to merge\")\n      }\n    }\n  }\n}\n\nexport default recursivelyMerge;\n","import recursivelyMerge from \"./recursivelyMerge\";\n\nexport default class Unit {\n  constructor(unitType, country) {\n    this.unitType = unitType;\n    this.country = country;\n\n    this.missingEquipment = new Set();\n    this.equipment = new Map();\n    for (let name in unitType.equipment) {\n      let count = unitType.equipment[name];\n      let equipment = country.equipmentMap[name];\n      if (equipment) {\n        this.equipment.set(equipment, count);\n      } else {\n        let fallbackEquipment = country.db.fallbackEquipmentMap[name];\n        if (!fallbackEquipment) {\n          throw new Error(`Can't find ${name}`);\n        }\n        this.equipment.set(fallbackEquipment, count);\n        this.missingEquipment.add(fallbackEquipment.name);\n      }\n    }\n    this.country_bonuses = country.unitBonusesfor(unitType.key);\n  }\n\n  get group() {\n    return this.unitType.group;\n  }\n\n  get suppression() {\n    return this.calculateFromUnitTypeAndBonus(\"suppression\");\n  }\n\n  get suppression_factor() {\n    return this.calculateFromUnitTypeAndBonus(\"suppression_factor\");\n  }\n\n  get hp() {\n    return this.unitType.hp;\n  }\n\n  get supply_use() {\n    return this.unitType.supply_use;\n  }\n\n  get fuel_consumption() {\n    let base = this.calculateFromEquipmentAndBonusMult(\"fuel_consumption\");\n    let factor = this.unitType.own_equipment_fuel_consumption_mult;\n    if (factor == null) {\n      factor = 1;\n    }\n    return base * factor;\n  }\n\n  get fuel_capacity() {\n    return 28.8 * this.fuel_consumption;\n  }\n\n  get manpower() {\n    return this.unitType.manpower;\n  }\n\n  get training_time() {\n    return this.unitType.training_time;\n  }\n\n  get weight() {\n    return this.unitType.weight;\n  }\n\n  get special_forces() {\n    return this.unitType.special_forces;\n  }\n\n  get can_be_parachuted() {\n    return this.unitType.can_be_parachuted;\n  }\n\n  get name() {\n    return this.unitType.name;\n  }\n\n  get org() {\n    let base = this.unitType.org;\n    return base + (this.country_bonuses[\"max_organisation\"] || 0)\n  }\n\n  get recovery_rate() {\n    let base = this.unitType.recovery_rate;\n    return base + (this.country_bonuses[\"default_morale\"] || 0)\n  }\n\n  get reliability_factor() {\n    return this.calculateFromUnitTypeAndBonus(\"reliability_factor\");\n  }\n\n  get casualty_trickleback() {\n    return this.calculateFromUnitTypeAndBonus(\"casualty_trickleback\");\n  }\n\n  get experience_loss_factor() {\n    return this.calculateFromUnitTypeAndBonus(\"experience_loss_factor\");\n  }\n\n  get initiative() {\n    return this.calculateFromUnitTypeAndBonus(\"initiative\");\n  }\n\n  get equipment_capture_factor() {\n    return this.calculateFromUnitTypeAndBonus(\"equipment_capture_factor\")\n  }\n\n  get supply_consumption_factor() {\n    return this.calculateFromUnitTypeAndBonus(\"supply_consumption_factor\")\n  }\n\n  get fuel_consumption_factor() {\n    return this.calculateFromUnitTypeAndBonus(\"fuel_consumption_factor\")\n  }\n\n  get combat_width() {\n    return this.calculateFromUnitTypeAndBonus(\"combat_width\");\n  }\n\n  get is_frontline() {\n    return this.combat_width > 0;\n  }\n\n  get recon() {\n    return this.calculateFromUnitTypeAndBonus(\"recon\")\n  }\n\n  get entrenchment() {\n    return this.calculateFromUnitTypeAndBonus(\"entrenchment\")\n  }\n\n  get soft_attack() {\n    return this.calculateFromEquipmentAndBonusMult(\"soft_attack\")\n  }\n\n  get hard_attack() {\n    return this.calculateFromEquipmentAndBonusMult(\"hard_attack\")\n  }\n\n  get air_attack() {\n    return this.calculateFromEquipmentAndBonusMult(\"air_attack\")\n  }\n\n  get defense() {\n    return this.calculateFromEquipmentAndBonusMult(\"defense\")\n  }\n\n  get breakthrough() {\n    return this.calculateFromEquipmentAndBonusMult(\"breakthrough\")\n  }\n\n  get piercing() {\n    return this.calculateFromEquipmentAndBonusMult(\"ap_attack\")\n  }\n\n  get armor() {\n    // never any bonus, but doesn't hurt\n    return this.calculateFromEquipmentAndBonusMult(\"armor_value\")\n  }\n\n  get hardness() {\n    return this.calculateFromEquipmentAndBonusMult(\"hardness\")\n  }\n\n  calculateFromUnitTypeAndBonus(stat) {\n    let base = this.unitType[stat] || 0;\n    return base + (this.country_bonuses[stat] || 0)\n  }\n\n  calculateFromEquipmentAndBonus(stat) {\n    let base = 0;\n    for (let equipment of this.equipment.keys()) {\n      base += equipment[stat];\n    }\n    return base + (this.country_bonuses[stat] || 0)\n  }\n\n  calculateFromEquipmentAndBonusMult(stat) {\n    let base = 0;\n    for (let equipment of this.equipment.keys()) {\n      base += (equipment[stat] || 0);\n    }\n\n    return base * (1 + (this.unitType[stat] || 0) + (this.country_bonuses[stat] || 0))\n  }\n\n  get ic_cost() {\n    let result = 0;\n    for (let [equipment, count] of this.equipment) {\n      result += equipment.build_cost_ic * count;\n    }\n    return result;\n  }\n\n  get speed() {\n    // Unclear what to do when multiply types are used. Mot uses mot(12)+inf(4)\n    let equipment = [...this.equipment.keys()]\n    let equipmentSpeeds = equipment.map(e => e.maximum_speed).filter(s => s);\n    let equipmentSpeed = equipmentSpeeds.length ? Math.max(...equipmentSpeeds) : 4.0;\n    return equipmentSpeed * (1 + this.unitType.maximum_speed || 0)\n  }\n\n  get terrain_bonuses() {\n    let result = {};\n    recursivelyMerge(result, this.unitType.terrain_bonuses);\n    if (this.country_bonuses.terrain_bonuses) {\n      recursivelyMerge(result, this.country_bonuses.terrain_bonuses);\n    }\n    return result;\n  }\n}\n","import {sprintf} from \"sprintf-js\";\n\nfunction sum(values) {\n  let result = 0;\n  for (let value of values) {\n    result += value;\n  }\n  return result;\n}\n\nfunction max(values) {\n  return Math.max(...values);\n}\n\nfunction min(values) {\n  return Math.min(...values);\n}\n\nfunction avg(values) {\n  if (values.length === 0) return;\n  return sum(values) / values.length;\n}\n\nfunction round3(x) {\n  return Math.round(x * 1000) / 1000;\n}\n\nfunction round6(x) {\n  return Math.round(x * 1000000) / 1000000;\n}\n\nfunction cleanupReport(report) {\n  report = report.filter(([k,v,t]) => (v !== 0));\n  return report.map(([k,v,t]) => {\n    if (typeof(v) === \"number\") {\n      return [k,round6(v),t];\n    } else {\n      return [k,v,t];\n    }\n  })\n}\n\nfunction formatSpeed(value) {\n  if (!value) {\n    return 0;\n  }\n  return sprintf(\"%.1f km/h\", value);\n}\n\nexport default class Division {\n  constructor(country, units) {\n    this.country = country;\n    this.units = units;\n  }\n\n  // Gather related numbers for frontend\"s convenience\n  // This is sort of UI responsibility\n  basics() {\n    return cleanupReport([\n      [\"Speed\", formatSpeed(this.speed), this.tooltipForSpeed()],\n      [\"HP\", this.hp, this.tooltipForSum(\"hp\")],\n      [\"Organization\", this.org, this.tooltipForOrganization()],\n      [\"Recovery rate\", this.recovery_rate, this.tooltipForRecoveryRate()],\n      [\"Suppression\", this.suppression, this.tooltipForSuppression()],\n      [\"Weight\", this.weight, this.tooltipForSum(\"weight\")],\n      [\"Supply Use\", this.supply_use, this.tooltipForSupplyUse()],\n      [\"Fuel Use\", this.fuel_use, this.tooltipForFuelUse()],\n      [\"Fuel Capacity\", this.fuel_capacity, this.tooltipForSum(\"fuel_capacity\")],\n      [\"Recon\", this.recon, this.tooltipForSum(\"recon\")],\n      [\"Entrenchment\", this.entrenchment, this.tooltipForEntrenchment()],\n      [\"Reliability\", this.reliability_factor, this.tooltipForSum(\"reliability_factor\")],\n      [\"Casualty trickleback\", this.casualty_trickleback, this.tooltipForSum(\"casualty_trickleback\")],\n      [\"XP Loss\", this.experience_loss_factor, this.tooltipForSum(\"experience_loss_factor\")],\n      [\"Can be parachuted\", this.can_be_parachuted, this.tooltipForCanBeParachuted()],\n      [\"Special forces\", this.special_forces, this.tooltipForSpecialForces()],\n      [\"Manpower\", this.manpower, this.tooltipForSum(\"manpower\")],\n      [\"Training Time\", `${this.training_time} days`, this.tooltipForTrainingTime()],\n      [\"IC Cost\", this.ic_cost, this.tooltipForSum(\"ic_cost\")],\n    ])\n  }\n\n  equipmentUsed() {\n    let result = [];\n    for (let [equipment, count] of this.equipment) {\n      if (count > 0) {\n        result.push([equipment, count, round6(equipment.build_cost_ic * count)]);\n      }\n    }\n    return result;\n  }\n\n  combat() {\n    return cleanupReport([\n      [\"Soft Attack\", this.soft_attack, this.tooltipForSum(\"soft_attack\")],\n      [\"Hard Attack\", this.hard_attack, this.tooltipForSum(\"hard_attack\")],\n      [\"Defense\", this.defense, this.tooltipForSum(\"defense\")],\n      [\"Breakthrough\", this.breakthrough, this.tooltipForSum(\"breakthrough\")],\n      [\"Armor\", this.armor, this.tooltipForArmor()],\n      [\"Piercing\", this.piercing, this.tooltipForPiercing()],\n      [\"Combat width\", this.combat_width, this.tooltipForSum(\"combat_width\")],\n      [\"Hardness\", sprintf(\"%.1f %%\", 100*this.hardness), this.tooltipForHardness()],\n      [\"Initiative\", this.initiative, this.tooltipForSum(\"initiative\")],\n      [\"Equipment Capture\", this.equipment_capture_factor, this.tooltipForSum(\"equipment_capture_factor\")],\n    ])\n  }\n\n  terrain() {\n    let bonuses = this.terrain_bonuses;\n    return Object.keys(bonuses).sort().map(name => {\n      let bonus = bonuses[name];\n      return [name, bonus.movement, bonus.attack, bonus.defence];\n    })\n  }\n\n  // Individual numbers\n  get manpower() {\n    return sum(this.units.map(u => u.manpower))\n  }\n\n  get training_time() {\n    return max(this.units.map(u => u.training_time))\n  }\n\n  get combat_width() {\n    return sum(this.units.map(u => u.combat_width))\n  }\n\n  get hp() {\n    return sum(this.units.map(u => u.hp))\n  }\n\n  get org() {\n    return round3(avg(this.units.map(u => u.org)))\n  }\n\n  get weight() {\n    return sum(this.units.map(u => u.weight))\n  }\n\n  get recovery_rate() {\n    return round3(avg(this.units.map(u => u.recovery_rate)))\n  }\n\n  get suppression() {\n    let base = sum(this.units.map(u => u.suppression));\n    let factor = sum(this.units.map(u => u.suppression_factor));\n    return round6(base * (1+factor));\n  }\n\n  get supply_use() {\n    let base = sum(this.units.map(u => u.supply_use));\n    let unit_factor = sum(this.units.map(u => u.supply_consumption_factor));\n    let doctrine_factor = this.country.divisionBonuses[\"supply_consumption_factor\"] || 0;\n    return round6(base * (1+unit_factor) * (1+doctrine_factor));\n  }\n\n  get fuel_use() {\n    let base = sum(this.units.map(u => u.fuel_consumption));\n    let factor = sum(this.units.map(u => u.fuel_consumption_factor));\n    return round6(base * (1+factor));\n  }\n\n  get fuel_capacity() {\n    // It's 28.8 times fuel use - without discounts\n    let base = sum(this.units.map(u => u.fuel_consumption));\n    let factor = 28.8;\n    return round6(base * factor);\n  }\n\n  get soft_attack() {\n    return round6(sum(this.units.map(u => u.soft_attack)))\n  }\n\n  get hard_attack() {\n    return round6(sum(this.units.map(u => u.hard_attack)))\n  }\n\n  get air_attack() {\n    return round6(sum(this.units.map(u => u.air_attack)))\n  }\n\n  get defense() {\n    return round6(sum(this.units.map(u => u.defense)))\n  }\n\n  get breakthrough() {\n    return round6(sum(this.units.map(u => u.breakthrough)))\n  }\n\n  get ic_cost() {\n    return sum(this.units.map(u => u.ic_cost))\n  }\n\n  get entrenchment() {\n    let base = 5;\n    let units = sum(this.units.map(u => u.entrenchment))\n    let doctrine_bonus = this.country.divisionBonuses[\"max_dig_in\"];\n    return base + units + doctrine_bonus;\n  }\n\n  get reliability_factor() {\n    return sum(this.units.map(u => u.reliability_factor))\n  }\n\n  get casualty_trickleback() {\n    return sum(this.units.map(u => u.casualty_trickleback))\n  }\n\n  get equipment_capture_factor() {\n    return sum(this.units.map(u => u.equipment_capture_factor))\n  }\n\n  get experience_loss_factor() {\n    return sum(this.units.map(u => u.experience_loss_factor))\n  }\n\n  get recon() {\n    return sum(this.units.map(u => u.recon))\n  }\n\n  get initiative() {\n    return sum(this.units.map(u => u.initiative))\n  }\n\n  get frontline_units() {\n    return this.units.filter(u => u.is_frontline)\n  }\n\n  get support_units() {\n    return this.units.filter(u => !u.is_frontline)\n  }\n\n  get speed() {\n    let frontline_units = this.frontline_units;\n    if (frontline_units.length === 0) {\n      return null;\n    }\n    let base = min(frontline_units.map(u => u.speed));\n    let factor = this.country.divisionBonuses[\"army_speed_factor\"] || 0;\n    return round3(base * (1 + factor));\n  }\n\n  get armor() {\n    let mx = max(this.units.map(u => u.armor));\n    let wa = avg(this.units.map(u => u.armor));\n    return round3(0.3 * mx + 0.7 * wa);\n  }\n\n  get piercing() {\n    let mx = max(this.units.map(u => u.piercing));\n    let wa = avg(this.units.map(u => u.piercing));\n    return round3(0.4 * mx + 0.6 * wa)\n  }\n\n  get can_be_parachuted() {\n    return this.units.every(u => u.can_be_parachuted) ? \"Yes\" : \"No\"\n  }\n\n  get special_forces() {\n    return this.units.filter(u => u.special_forces).length\n  }\n\n  get hardness() {\n    let unit_hardness = this.frontline_units.map(u => u.hardness);\n    if (unit_hardness.length === 0) {\n      return 0;\n    }\n    return round6(avg(unit_hardness));\n  }\n\n  get equipment() {\n    let result = new Map();\n    for (let unit of this.units) {\n      for (let [equipment, count] of unit.equipment) {\n        let otherCount = result.get(equipment) || 0;\n        result.set(equipment, count + otherCount);\n      }\n    }\n    return result;\n  }\n\n  // average of frontlines + sum of supports\n  terrainBonusfor (terrain, bonus) {\n    let values = this.groupUnitStats(unit => (unit.terrain_bonuses[terrain] || {})[bonus] || 0);\n    let frontlineValues = values.filter(({unit}) => unit.is_frontline);\n    let supportValues = values.filter(({unit}) => !unit.is_frontline)\n    let baseValue = frontlineValues.map(({count, value}) => count*value).reduce((a,b) => a+b, 0.0);\n    let bonusValue = supportValues.map(({value}) => value).reduce((a,b) => a+b, 0.0);\n\n    let value = baseValue / this.frontline_units.length + bonusValue;\n\n    // If there are all 0s, don't show anything\n    // Otherwise show 0.0% with tooltip if calculations add up to 0.0%\n    if (values.every(({value}) => value === 0)) {\n      return { value: 0 };\n    }\n\n    let format = (value) => {\n      return sprintf(\"%+.1f%%\", value * 100);\n    }\n\n    let unitData = frontlineValues.map(({unit,count,value}) => ({unit,count,value:format(value)}));\n    let secondaryData = supportValues.filter(({value}) => value !== 0).map(({unit,count,value}) => ({unit,count,value:format(value)}));\n\n    let tooltipData = {\n      header: \"Average of frontline units:\",\n      unitData,\n    };\n    if (secondaryData.length > 0) {\n      tooltipData.secondaryHeader = \"Modified by support units:\";\n      tooltipData.secondaryData = secondaryData;\n    }\n    return { value, tooltipData };\n  }\n\n  get terrain_bonuses() {\n    let terrains = new Set();\n    for (let unit of this.units) {\n      for (let terrain of Object.keys(unit.terrain_bonuses)) {\n        terrains.add(terrain);\n      }\n    }\n    let result = {};\n    for (let terrain of terrains) {\n      result[terrain] = {\n        movement: this.terrainBonusfor (terrain, \"movement\"),\n        attack: this.terrainBonusfor (terrain, \"attack\"),\n        defence: this.terrainBonusfor (terrain, \"defence\"),\n      };\n    }\n    return result;\n  }\n\n  missingEquipment() {\n    let result = new Set();\n    for (let unit of this.units) {\n      unit.missingEquipment.forEach(eq => {\n        result.add(eq)\n      })\n    }\n    return result;\n  }\n\n  // These are sort of UI maters:\n  warnings() {\n    let result = [];\n    let frontline_units = this.frontline_units;\n    let frontline_count = frontline_units.length;\n    let support_count = this.support_units.length;\n    let infantry = frontline_units.filter((u) => u.group === \"infantry\").length;\n    let mobile = frontline_units.filter((u) => u.group === \"mobile\").length;\n    let armored = frontline_units.filter((u) => u.group === \"armor\").length;\n    let brigades = Math.ceil(infantry/5) + Math.ceil(mobile/5) + Math.ceil(armored/5);\n    let missingEquipment = this.missingEquipment();\n\n    if (frontline_count === 0) {\n      result.push(\"No frontline battalions\");\n    }\n    if (frontline_count > 25) {\n      result.push(`${frontline_count}/25 frontline battalions`);\n    }\n    else if (brigades > 5) {\n      // No need to use this warning if there\"s just too many units\n      result.push(`${brigades}/5 brigades`);\n    }\n    if (support_count > 5) {\n      result.push(`${support_count}/5 support companies`);\n    }\n    for (let eq of missingEquipment) {\n      result.push(`Missing equipment: ${eq}`);\n    }\n    return result;\n  }\n\n  groupUnitStats(field) {\n    let unitData = new Map();\n    for (let unit of this.units) {\n      let value;\n      if (typeof field === \"string\") {\n        value = unit[field];\n      } else {\n        value = field(unit);\n      }\n      if (typeof(value) === \"number\") {\n        value = round6(value);\n      }\n      if (unitData.has(unit)) {\n        let count = unitData.get(unit).count + 1;\n        unitData.set(unit, {unit, count, value});\n      } else {\n        let count = 1;\n        unitData.set(unit, {unit, count, value});\n      }\n    }\n    return [...unitData.values()]\n  }\n\n  groupFrontlineUnitStats(field) {\n    return this.groupUnitStats(field).filter(({unit}) => unit.is_frontline)\n  }\n\n  tooltipForSum(field) {\n    return ({\n      header: \"Sum of:\",\n      unitData: this.groupUnitStats(field).filter(({value}) => value !== 0),\n    })\n  }\n\n  tooltipForEntrenchment() {\n    let result = {\n      header: \"Sum of:\",\n      base: 5,\n      unitData: this.groupUnitStats(\"entrenchment\").filter(({value}) => value !== 0),\n    };\n    let factor = this.country.divisionBonuses[\"max_dig_in\"];\n    if (factor !== 0) {\n      result.techHeader = \"Modified by doctrine:\"\n      result.techData = this.techBonusesFor(\"max_dig_in\")\n    }\n    return result;\n  }\n\n  tooltipForArmor() {\n    return ({\n      header: \"30% max / 70% average of:\",\n      unitData: this.groupUnitStats(\"armor\"),\n    })\n  }\n\n  tooltipForPiercing() {\n    return ({\n      header: \"40% max / 60% average of:\",\n      unitData: this.groupUnitStats(\"piercing\"),\n    })\n  }\n\n  tooltipForSuppression() {\n    let result = {\n      header: \"Sum of:\",\n      unitData: this.groupUnitStats(\"suppression\").filter(({value}) => value !== 0),\n    }\n    let secondaryData = this.groupUnitStats(\"suppression_factor\").filter(({value}) => value !== 0);\n    if (secondaryData.length > 0) {\n      result.secondaryHeader = \"Modified by:\"\n      result.secondaryData = secondaryData.map(({unit,count,value}) => ({unit, count, value: sprintf(\"%+f%%\", 100*value)}));\n    }\n    return result;\n  }\n\n  tooltipForSupplyUse() {\n    let result = {\n      header: \"Sum of:\",\n      unitData: this.groupUnitStats(\"supply_use\").filter(({value}) => value !== 0),\n    };\n    let secondaryData = this.groupUnitStats(\"supply_consumption_factor\").filter(({value}) => value !== 0);\n    if (secondaryData.length > 0) {\n      result.secondaryHeader = \"Modified by:\"\n      result.secondaryData = secondaryData.map(({unit,count,value}) => ({unit, count, value: sprintf(\"%+f%%\", 100*value)}));\n    }\n    let factor = this.country.divisionBonuses[\"supply_consumption_factor\"];\n    if (factor !== 0) {\n      result.techHeader = \"Modified by doctrine:\"\n      result.techData = this\n        .techBonusesFor(\"supply_consumption_factor\")\n        .map(({name, value}) => ({name, value: sprintf(\"%+f%%\", 100*value)}))\n    }\n    return result;\n  }\n\n  tooltipForFuelUse() {\n    let result = {\n      header: \"Sum of:\",\n      unitData: this.groupUnitStats(\"fuel_consumption\").filter(({value}) => value !== 0),\n    };\n    let secondaryData = this.groupUnitStats(\"fuel_consumption_factor\").filter(({value}) => value !== 0);\n    if (secondaryData.length > 0) {\n      result.secondaryHeader = \"Modified by:\"\n      result.secondaryData = secondaryData.map(({unit,count,value}) => ({unit, count, value: sprintf(\"%+f%%\", 100*value)}));\n    }\n    return result;\n  }\n\n  techBonusesFor(field) {\n    return this\n      .country\n      .technologies\n      .map(tech => ({name: tech.name, value: tech[field]}))\n      .filter(({value}) => (value||0) !== 0)\n  }\n\n  tooltipForSpeed() {\n    let result = {\n      header: \"Minimum of frontline units:\",\n      unitData: this.groupFrontlineUnitStats(\"speed\").map(({unit,count,value}) => ({unit, count, value: formatSpeed(value)})),\n    };\n    let factor = this.country.divisionBonuses[\"army_speed_factor\"];\n    if (factor !== 0) {\n      result.techHeader = \"Modified by doctrine:\"\n      result.techData = this\n        .techBonusesFor(\"army_speed_factor\")\n        .map(({name, value}) => ({name, value: sprintf(\"%+f%%\", 100*value)}))\n    }\n    return result;\n  }\n\n  tooltipForOrganization() {\n    return ({\n      header: \"Average of:\",\n      unitData: this.groupFrontlineUnitStats(\"org\"),\n    })\n  }\n\n  tooltipForRecoveryRate() {\n    return ({\n      header: \"Average of:\",\n      unitData: this.groupFrontlineUnitStats(\"recovery_rate\"),\n    })\n  }\n\n  tooltipForHardness() {\n    return ({\n      header: \"Average of frontline units:\",\n      unitData: this.groupFrontlineUnitStats(\"hardness\").map(({unit,count,value}) => ({unit, count, value: sprintf(\"%.1f %%\", 100*value)})),\n    })\n  }\n\n  tooltipForCanBeParachuted() {\n    return ({\n      header: \"If all frontline units can:\",\n      unitData: this.groupFrontlineUnitStats(\"can_be_parachuted\").map(({unit,count,value}) => ({unit, count, value: value ? \"Yes\" : \"No\"})),\n    })\n  }\n\n  tooltipForSpecialForces() {\n    return ({\n      header: \"Count of:\",\n      unitData: this.groupFrontlineUnitStats(\"special_forces\")\n        .filter(({value}) => value)\n        .map(({unit,count,value}) => ({unit, count, value: \"Yes\"})),\n    })\n  }\n\n  tooltipForTrainingTime() {\n    return ({\n      header: \"Max of:\",\n      unitData: this.groupUnitStats(\"training_time\").map(({unit,count,value}) => ({unit, count, value: `${value} days`})),\n    })\n  }\n}\n","// In principle other stats could get upgrades too\nlet upgradableStats = new Set([\n  \"air_agility\",\n  \"air_attack\",\n  \"air_bombing\",\n  \"air_ground_attack\",\n  \"air_range\",\n  \"anti_air_attack\",\n  \"ap_attack\",\n  \"armor_value\",\n  \"attack\",\n  \"carrier_size\",\n  \"evasion\",\n  \"fire_range\",\n  \"hard_attack\",\n  \"maximum_speed\",\n  \"naval_range\",\n  \"naval_speed\",\n  \"naval_strike_attack\",\n  \"reliability\",\n  \"shore_bombardment\",\n  \"soft_attack\",\n  \"sub_attack\",\n  \"sub_detection\",\n  \"sub_visibility\",\n  \"torpedo_attack\",\n]);\n\nfunction round6(x) {\n  return Math.round(x * 1000000) / 1000000;\n}\n\nexport default class Equipment {\n  constructor(db, equipmentType, upgrades) {\n    this.db = db;\n    this.equipmentType = equipmentType;\n    this.upgrades = upgrades;\n    let variantBonus = this.calculateVariantBonus();\n\n    for (let key in this.equipmentType) {\n      let base = this.equipmentType[key];\n      if (upgradableStats.has(key)) {\n        let bonus = variantBonus[key];\n        if (bonus) {\n          this[key] = round6(base * (1 + bonus));\n        } else {\n          this[key] = base;\n        }\n      } else {\n        this[key] = base;\n      }\n    }\n  }\n\n  calculateVariantBonus() {\n    let available_upgrades = this.equipmentType.upgrades || {};\n    let result = {};\n    for (let key in this.upgrades) {\n      let level = this.upgrades[key];\n      if (available_upgrades.indexOf(key) === -1) {\n        throw new Error(`Invalid upgrade ${key} for equipment ${this.equipmentType.key}`);\n      }\n      let upgrade = this.db.upgrades[key];\n      for (let stat in upgrade) {\n        if (stat === \"name\" || stat === \"max_level\" || stat === \"cost\" || stat === \"key\") {\n          continue;\n        }\n        let upgradeValue = upgrade[stat];\n        result[stat] = result[stat] || 0;\n        result[stat] = round6(result[stat] + level * upgradeValue);\n      }\n    }\n    return result;\n  }\n}\n","import Unit from \"./Unit\";\nimport Division from \"./Division\";\nimport Equipment from \"./Equipment\";\nimport recursivelyMerge from \"./recursivelyMerge\";\n\nexport default class Country {\n  constructor(db, technologies, upgrades) {\n    this.db = db;\n    this.technologies = technologies;\n    this.upgrades = upgrades;\n    this.equipmentMap = this.calculateEquipmentMap();\n    this.divisionBonuses = this.calculateDivisionBonuses();\n  }\n\n  calculateEquipmentMap() {\n    let result = {}\n    // Making a silly assumption that they're sorted asciibetically\n    // It seems to be right, as they're all X0, X1, X2 etc.\n    for (let name of this.enabledEquipmentTypes()) {\n      let equipment = this.db.equipmentTypes[name];\n      let archetype = equipment.archetype;\n      if (!result[archetype] || (equipment.key > result[archetype].key)) {\n        result[archetype] = equipment;\n      }\n    }\n    for (let name in result) {\n      let equipmentType = result[name];\n      let upgrades = this.upgrades[equipmentType.key] || {};\n      result[name] = new Equipment(this.db, equipmentType, upgrades);\n    }\n    return result;\n  }\n\n  availableUnits() {\n    let {db} = this;\n    let result = [];\n    let enabledSubunits = this.enabledSubunits();\n    let enabledEquipmentArchetypes = this.enabledEquipmentArchetypes();\n    for (let name in db.unitTypes) {\n      let unitType = db.unitTypes[name];\n      if (unitType.active || enabledSubunits.has(name)) {\n        let equipmentNeeded = Object.keys(unitType.equipment);\n        if (equipmentNeeded.every(eq => enabledEquipmentArchetypes.has(eq))) {\n          result.push(unitType);\n        }\n      }\n    }\n    return result;\n  }\n\n  division(unitTypes) {\n    let {db} = this;\n    let units = [];\n    for (let name in unitTypes) {\n      let unitType = db.unitTypes[name];\n      if (!unitType) {\n        throw new Error(`No such unit type: ${name}`)\n      }\n      let count = unitTypes[name];\n      let unit = new Unit(unitType, this);\n      for (let i=0; i<count; i++) {\n        units.push(unit);\n      }\n    }\n    return new Division(this, units);\n  }\n\n  unitBonusesfor (unitName) {\n    let categories = [unitName, ...this.db.unitTypes[unitName].categories];\n    let result = {};\n    for (let technology of this.technologies) {\n      for (let category of categories) {\n        if (technology.unit_bonuses[category]) {\n          recursivelyMerge(result, technology.unit_bonuses[category]);\n        }\n      }\n    }\n    return result;\n  }\n\n  calculateDivisionBonuses() {\n    let result = {\n      max_dig_in: 0,\n      supply_consumption_factor: 0,\n      army_speed_factor: 0,\n    };\n    for(let tech of this.technologies) {\n      result.max_dig_in += (tech.max_dig_in || 0);\n      result.supply_consumption_factor += (tech.supply_consumption_factor || 0);\n      result.army_speed_factor += (tech.army_speed_factor || 0);\n    }\n    return result;\n  }\n\n  enabledSubunits() {\n    let {technologies} = this;\n    let result = new Set();\n    for (let tech of technologies) {\n      for (let name of (tech.enable_subunits || [])) {\n        result.add(name);\n      }\n    }\n    return result;\n  }\n\n  enabledEquipmentTypes() {\n    let {technologies} = this;\n    let result = new Set();\n    for (let tech of technologies) {\n      for (let name of (tech.enable_equipments || [])) {\n        result.add(name);\n      }\n    }\n    return result;\n  }\n\n  enabledEquipmentArchetypes() {\n    let {db} = this;\n    let result = new Set();\n    for (let eq of this.enabledEquipmentTypes()) {\n      let archetype = db.equipmentTypes[eq].archetype;\n      result.add(archetype);\n    }\n    return result;\n  }\n}\n","import Country from \"./Country\";\nimport Equipment from \"./Equipment\";\nimport vanilla from \"./vanilla.json\";\nimport kaiserreich from \"./kaiserreich.json\";\nimport millennium_dawn from \"./millennium_dawn.json\";\n\nlet mods = {\n  vanilla, kaiserreich, millennium_dawn,\n};\n\nexport default class Database {\n  constructor(modName) {\n    let mod = mods[modName];\n    this.technology = mod.technology;\n    this.doctrines = mod.doctrines;\n    this.equipmentTypes = mod.equipment;\n    this.unitTypes = mod.units;\n    this.upgrades = mod.upgrades;\n    this.default_year = mod.default_year;\n    this.default_units = mod.default_units;\n    this.default_support = mod.default_support;\n\n    /* workarounds for limited collections API */\n    for (let key in this.technology) {\n      this.technology[key].key = key;\n    }\n    for (let key in this.equipmentTypes) {\n      this.equipmentTypes[key].key = key;\n    }\n    for (let key in this.unitTypes) {\n      this.unitTypes[key].key = key;\n    }\n    for (let key in this.upgrades) {\n      this.upgrades[key].key = key;\n    }\n    this.fallbackEquipmentMap = this.calculateFallbackEquipmentMap();\n  }\n\n  availableYears() {\n    let years = new Set();\n    for (let tech of Object.values(this.technology)) {\n      let year = tech.start_year;\n      if (year) {\n        years.add(year);\n      }\n    }\n    return [...years].sort();\n  }\n\n  availableDoctrines() {\n    return Object.keys(this.doctrines);\n  }\n\n  technologiesForYear(year) {\n    let techs = [];\n    if (year) {\n      for (let name in this.technology) {\n        let tech = this.technology[name];\n        if (tech.start_year && tech.start_year <= year) {\n          techs.push(name);\n        }\n      }\n    }\n    if (!techs.length) {\n      return [\"infantry_weapons\"];\n    }\n    return techs;\n  }\n\n  technologiesForDoctrine(doctrine) {\n    return this.doctrines[doctrine] || [];\n  }\n\n  country(year, doctrine, upgrades) {\n    let techs = [...this.technologiesForYear(year), ...this.technologiesForDoctrine(doctrine)];\n    return new Country(this, techs.map(t => this.technology[t]), upgrades);\n  }\n\n  supportUnitTypes() {\n    return Object.keys(this.unitTypes).filter((u) => this.unitTypes[u].group === \"support\");\n  }\n\n  // Using any of these results in invalid division, but it won't crash app\n  // Pick oldest equipment for each archetype\n  calculateFallbackEquipmentMap() {\n    let result = {};\n    for (let name in this.equipmentTypes) {\n      let equipmentType = this.equipmentTypes[name];\n      let archetype = equipmentType.archetype;\n      if (!result[archetype] || (equipmentType.key < result[archetype].key)) {\n        result[archetype] = equipmentType;\n      }\n      for (let name in result) {\n        // FIXME: fallback equipment gets no variants, but they're still shown in UI\n        result[name] = new Equipment(this, result[name], {});\n      }\n    }\n    return result;\n  }\n}\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.scss\";\nimport Division from \"./components/Division\";\nimport Database from \"./database/Database\";\n\nclass App extends Component {\n  dbs = {\n    vanilla: new Database(\"vanilla\"),\n    kaiserreich: new Database(\"kaiserreich\"),\n    millennium_dawn: new Database(\"millennium_dawn\"),\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Hearts of Iron IV - Division Designer</h1>\n        </header>\n        <Division dbs={this.dbs} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}